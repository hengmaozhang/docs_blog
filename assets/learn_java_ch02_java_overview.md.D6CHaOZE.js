import{_ as s,c as i,o as t,a3 as n}from"./chunks/framework.C9ROEaIA.js";const g=JSON.parse('{"title":"第2章 Java概述与基础知识","description":"","frontmatter":{},"headers":[],"relativePath":"learn_java/ch02_java_overview.md","filePath":"learn_java/ch02_java_overview.md"}'),l={name:"learn_java/ch02_java_overview.md"};function h(p,a,e,r,k,d){return t(),i("div",null,a[0]||(a[0]=[n(`<p><a href="#第2章-java概述与基础知识">第2章 Java概述与基础知识</a></p><ul><li><p><a href="#java-历史">Java 历史</a></p></li><li><p><a href="#java技术体系平台">Java技术体系平台</a></p></li><li><p><a href="#java-重要特点">Java 重要特点</a></p><ul><li><a href="#java-虚拟机jvm">Java 虚拟机JVM</a></li></ul></li><li><p><a href="#jdkjre">JDK，JRE</a></p><ul><li><a href="#jdk-基本介绍">JDK 基本介绍</a></li><li><a href="#jre-基本介绍">JRE 基本介绍</a></li><li><a href="#jdkjre-和jvm-的包含关系">JDK、JRE 和JVM 的包含关系</a></li></ul></li><li><p><a href="#java-快速入门">Java 快速入门</a></p><ul><li><a href="#开发步骤">开发步骤</a></li><li><a href="#注意细节">注意细节</a></li><li><a href="#代码">代码</a></li></ul></li><li><p><a href="#java-转义字符">Java 转义字符</a></p><ul><li><a href="#常用的转义字符">常用的转义字符</a></li><li><a href="#代码ChangeChar.java">代码ChangeChar.java</a></li></ul></li><li><p><a href="#注释comment">注释(comment)</a></p><ul><li><a href="#java-中的注释类型">Java 中的注释类型</a></li><li><a href="#文档注释">文档注释</a><ul><li><a href="#代码示例">代码示例</a></li><li><a href="#javadoc-常见标签">javadoc 常见标签</a></li></ul></li></ul></li><li><p><a href="#java-代码规范">Java 代码规范</a></p></li><li><p><a href="#dos-命令">DOS 命令</a></p><ul><li><a href="#dos-介绍">DOS 介绍</a></li><li><a href="#常用dos-命令">常用dos 命令</a></li><li><a href="#其他DOS命令">其他DOS命令</a></li></ul></li><li><p><a href="#环境变量path配置及其作用">环境变量path配置及其作用</a></p></li></ul><h1 id="第2章-java概述与基础知识" tabindex="-1">第2章 Java概述与基础知识 <a class="header-anchor" href="#第2章-java概述与基础知识" aria-label="Permalink to &quot;第2章 Java概述与基础知识&quot;">​</a></h1><h2 id="java-历史" tabindex="-1">Java 历史 <a class="header-anchor" href="#java-历史" aria-label="Permalink to &quot;Java 历史&quot;">​</a></h2><ul><li><p>1990 sun公司启动绿色计划</p></li><li><p>1992创建oak(橡树)语言-&gt;java</p></li><li><p>1994 gosling参加硅谷大会演示java功能震惊世界。1995 sun 正式发布java第1个版本。</p></li><li><p>2009年，甲骨文公司宣布收购Sun 。</p></li><li><p>2011，发布java7</p></li></ul><p><img src="https://raw.githubusercontent.com/timerring/scratchpad2023/main/2023/04/10-19-15-03-1681125302.png" alt=""></p><h2 id="java技术体系平台" tabindex="-1">Java技术体系平台 <a class="header-anchor" href="#java技术体系平台" aria-label="Permalink to &quot;Java技术体系平台&quot;">​</a></h2><ul><li><p>Java SE (Java Standard Edition) 标准版 支持面向桌面级应用(如Windows下的应用程序)的Java平台，提供了完整的Java核心API，此版本以前称为J2SE</p></li><li><p>Java EE(Java Enterprise Edition)企业版 是为开发企业环境下的应用程序提供的一套解决方案。该技术体系中包含的技术如:Servlet、Jsp等，主要针对于Web应用程序开发。版本以前称为J2EE</p></li><li><p>Java ME(Java Micro Edition)小型版 支持Java程序运行在移动终端(手机、PDA)上的平台，对Java API有所精简，并加入了键对移动终端的支持，此版本以前称为J2ME</p></li></ul><h2 id="java-重要特点" tabindex="-1">Java 重要特点 <a class="header-anchor" href="#java-重要特点" aria-label="Permalink to &quot;Java 重要特点&quot;">​</a></h2><ol><li><p>Java 语言是面向对象的(oop)</p></li><li><p>Java 语言是健壮的。Java 的强类型机制、异常处理、垃圾的自动收集等是Java 程序健壮性的重要保证</p></li><li><p>Java 语言是跨平台性的。[编译好的.class 文件可以在多个系统下运行，这种特性称为跨平台]</p></li><li><p>Java 语言是解释型的</p><p>解释性语言：javascript,PHP, java</p><p>编译性语言: c / c++ 区别是：解释性语言，编译后的代码，不能直接被机器执行,需要解释器来执行, 编译性语言, 编译后的代码, 可以直接被机器执行。</p></li></ol><h3 id="java-虚拟机-jvm" tabindex="-1">Java 虚拟机[JVM] <a class="header-anchor" href="#java-虚拟机-jvm" aria-label="Permalink to &quot;Java 虚拟机[JVM]&quot;">​</a></h3><ol><li>JVM 是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器，包含在JDK 中。</li><li>对于不同的平台，有不同的虚拟机。</li><li>Java 虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”。</li></ol><p><img src="https://raw.githubusercontent.com/timerring/scratchpad2023/main/2023/04/10-19-27-50-1681126068.png" alt=""></p><h2 id="jdk-jre" tabindex="-1">JDK，JRE <a class="header-anchor" href="#jdk-jre" aria-label="Permalink to &quot;JDK，JRE&quot;">​</a></h2><h3 id="jdk-基本介绍" tabindex="-1">JDK 基本介绍 <a class="header-anchor" href="#jdk-基本介绍" aria-label="Permalink to &quot;JDK 基本介绍&quot;">​</a></h3><ol><li>JDK 的全称(Java Development Kit Java 开发工具包) JDK = JRE + java 的开发工具[java, javac,javadoc,javap 等]</li><li>JDK 是提供给Java 开发人员使用的，其中包含了java 的开发工具，也包括了JRE。</li></ol><h3 id="jre-基本介绍" tabindex="-1">JRE 基本介绍 <a class="header-anchor" href="#jre-基本介绍" aria-label="Permalink to &quot;JRE 基本介绍&quot;">​</a></h3><ol><li>JRE(Java Runtime Environment Java 运行环境) JRE = JVM + Java 的核心类库[类]</li><li>包括Java 虚拟机(JVM Java Virtual Machine)和Java 程序所需的核心类库等，如果想要运行一个开发好的Java 程序，计算机中只需要安装JRE 即可。</li></ol><h3 id="jdk、jre-和jvm-的包含关系" tabindex="-1">JDK、JRE 和JVM 的包含关系 <a class="header-anchor" href="#jdk、jre-和jvm-的包含关系" aria-label="Permalink to &quot;JDK、JRE 和JVM 的包含关系&quot;">​</a></h3><ol><li>JDK = JRE + 开发工具集（例如Javac,java 编译工具等)</li><li>JRE = JVM + Java SE 标准类库（java 核心类库）</li><li>如果只想运行开发好的.class 文件只需要JRE</li></ol><h2 id="java-快速入门" tabindex="-1">Java 快速入门 <a class="header-anchor" href="#java-快速入门" aria-label="Permalink to &quot;Java 快速入门&quot;">​</a></h2><h3 id="开发步骤" tabindex="-1">开发步骤 <a class="header-anchor" href="#开发步骤" aria-label="Permalink to &quot;开发步骤&quot;">​</a></h3><ol><li>将Java 代码编写到扩展名为Hello.java 的文件中。</li><li>通过javac 命令对该java 文件进行编译，生成.class 文件。</li><li>通过java 命令对生成的class 文件进行运行。</li></ol><p><img src="https://raw.githubusercontent.com/timerring/scratchpad2023/main/2023/04/10-20-36-07-1681130166.png" alt=""></p><h3 id="注意细节" tabindex="-1">注意细节 <a class="header-anchor" href="#注意细节" aria-label="Permalink to &quot;注意细节&quot;">​</a></h3><ul><li><p>Java源文件以.java 为扩展名。源文件的基本组成部分是类(class)，如本类中的Hello类。</p></li><li><p>Java应用程序的执行入口是main(方法。它有固定的书写格式: public static void main(String[] args)</p></li><li><p>Java语言严格区分大小写。</p></li><li><p><strong>一个源文件中最多只能有一个public类。其它类的个数不限</strong>。每个类对应一个class。</p></li><li><p>如果源文件包含一个public类，则文件名必须按该类名命名!</p></li><li><p>一个源文件中最多只能有一个public类。其它类的个数不限，也可以将main方法写在非public类中，然后指定运行非public类，这样入口方法就是非public 的main方法。</p></li><li><p>文件的编码方式要与命令行的编码方式一致</p></li></ul><h3 id="代码" tabindex="-1">代码 <a class="header-anchor" href="#代码" aria-label="Permalink to &quot;代码&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//这是java的快速入门， 演示java的开发步骤</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//对代码的相关说明</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//1. public class Hello 表示Hello是一个类,是一个public公有的类</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//2. Hello{ } 表示一个类的开始和结束</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//3. public static void main(String[] args) 表示一个主方法,即我们程序的入口</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//4. main() {} 表示方法的开始和结束</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//5. System.out.println(&quot;hello,world~&quot;); 表示输出&quot;hello,world~&quot;到屏幕</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//6. ;表示语句结束</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //编写一个main方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;timerring hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//一个源文件中最多只能有一个public类。其它类的个数不限。[演示]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Dog 是一个类</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//编译后，每一个类，都对于一个.class</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //一个源文件中最多只能有一个public类。其它类的个数不限，也可以将main方法写在非public类中，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //然后指定运行非public 类，这样入口方法就是非public 的main方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello, 狗狗&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tiger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello, 老虎&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>运行</strong></p><p><img src="https://hengmaozhang.github.io/picx-images-hosting/20250222/picx-image-20250220091638856.26lm1tjwsr.jpg" alt=""></p><hr><p><strong>遇到的问题</strong></p><p><img src="https://hengmaozhang.github.io/picx-images-hosting/20250222/picx-image-20250219181927995.70agxy5gg5.jpg" alt=""></p><p><strong>解决方法</strong></p><p>在编辑系统环境变量的CLASSPATH中添加&#39;&#39;%JAVA_HOME%\\bin&quot;</p><h2 id="java-转义字符" tabindex="-1">Java 转义字符 <a class="header-anchor" href="#java-转义字符" aria-label="Permalink to &quot;Java 转义字符&quot;">​</a></h2><h3 id="常用的转义字符" tabindex="-1">常用的转义字符 <a class="header-anchor" href="#常用的转义字符" aria-label="Permalink to &quot;常用的转义字符&quot;">​</a></h3><p>在控制台，输入tab 键，可以实现命令补全</p><table tabindex="0"><thead><tr><th>转义字符</th><th>含义</th></tr></thead><tbody><tr><td>\\t</td><td>一个制表位，实现对齐的功能</td></tr><tr><td>\\n</td><td>换行符</td></tr><tr><td>\\</td><td>一个\\</td></tr><tr><td>\\\\</td><td>2个\\</td></tr><tr><td>&quot;</td><td>一个&quot;</td></tr><tr><td>&#39;</td><td>一个&#39;</td></tr><tr><td>\\r</td><td>一个回车 但不换行</td></tr><tr><td>\\r\\n</td><td>回车+换行</td></tr></tbody></table><h3 id="代码changechar-java" tabindex="-1">代码ChangeChar.java <a class="header-anchor" href="#代码changechar-java" aria-label="Permalink to &quot;代码ChangeChar.java&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//演示转义字符的使用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ChangeChar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//编写一个main方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		//\\t  ：一个制表位，实现对齐的功能</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;北京</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">天津</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">上海&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// \\n  ：换行符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jack</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">smith</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mary&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// \\\\  ：一个\\  \\\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Windows</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">System32</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cmd.exe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// \\\\  ：2个\\  \\\\\\\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Windows</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">System32</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cmd.exe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// \\&quot;  :一个&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;timerring说:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">要好好学习java,有前途</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// \\&#39;  ：一个&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;timerring说:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">要好好学习java,有前途</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// \\r  :一个回车 :北京rring</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;timerring</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">北京&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// \\r\\n  :回车+换行 :timerring</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 					北京</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;timerring</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">北京&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>运行：</strong></p><p><img src="https://hengmaozhang.github.io/picx-images-hosting/20250222/picx-image-20250220093417821.3d4xafa76w.jpg" alt=""></p><h2 id="注释-comment" tabindex="-1">注释(comment) <a class="header-anchor" href="#注释-comment" aria-label="Permalink to &quot;注释(comment)&quot;">​</a></h2><h3 id="java-中的注释类型" tabindex="-1">Java 中的注释类型 <a class="header-anchor" href="#java-中的注释类型" aria-label="Permalink to &quot;Java 中的注释类型&quot;">​</a></h3><ol><li>单行注释//</li><li>多行注释/* */ （多行注释里面不允许有多行注释嵌套）</li><li>文档注释/** */</li></ol><h3 id="文档注释" tabindex="-1">文档注释 <a class="header-anchor" href="#文档注释" aria-label="Permalink to &quot;文档注释&quot;">​</a></h3><h4 id="代码示例" tabindex="-1">代码示例 <a class="header-anchor" href="#代码示例" aria-label="Permalink to &quot;代码示例&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@author</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  timerring</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@version</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  1.0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 其中author  version  是javadoc的标签</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Comment02</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //编写一个main方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>注释内容可以被JDK提供的工具javadoc所解析，生成一套以网页文件形式体现的该程序的说明文档,一般写在类</p><p><code>javadoc -d 生成的doc所存的文件夹名 -author -version Comment.java</code></p><h4 id="javadoc-常见标签" tabindex="-1">javadoc 常见标签 <a class="header-anchor" href="#javadoc-常见标签" aria-label="Permalink to &quot;javadoc 常见标签&quot;">​</a></h4><table tabindex="0"><thead><tr><th><strong>标签</strong></th><th><strong>描述</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td><strong>@author</strong></td><td><strong>标识一个类的作者</strong></td><td><strong>@author description</strong></td></tr><tr><td><strong>@deprecated</strong></td><td><strong>指名一个过期的类或成员</strong></td><td><strong>@deprecated description</strong></td></tr><tr><td><strong>{@docRoot}</strong></td><td><strong>指明当前文档根目录的路径</strong></td><td><strong>Directory Path</strong></td></tr><tr><td><strong>@exception</strong></td><td><strong>标志一个类抛出的异常</strong></td><td><strong>@exception exception-name explanation</strong></td></tr><tr><td><strong>{@inheritDoc}</strong></td><td><strong>从直接父类继承的注释</strong></td><td><strong>Inherits a comment from the immediate surperclass.</strong></td></tr><tr><td><strong>{@link}</strong></td><td><strong>插入一个到另一个主题的链接</strong></td><td><strong>{@link name text}</strong></td></tr><tr><td><strong>{@linkplain}</strong></td><td><strong>插入一个到另一个主题的链接，但是该链接显示纯文本字体</strong></td><td><strong>Inserts an in-line link to another topic.</strong></td></tr><tr><td><strong>@param</strong></td><td><strong>说明一个方法的参数</strong></td><td><strong>@param parameter-name explanation</strong></td></tr><tr><td><strong>@return</strong></td><td><strong>说明返回值类型</strong></td><td><strong>@return explanation</strong></td></tr><tr><td><strong>@see</strong></td><td><strong>指定一个到另一个主题的链接</strong></td><td><strong>@see anchor</strong></td></tr><tr><td><strong>@serial</strong></td><td><strong>说明一个序列化属性</strong></td><td><strong>@serial description</strong></td></tr><tr><td><strong>@serialData</strong></td><td><strong>说明通过writeObject( ) 和 writeExternal( )方法写的数据</strong></td><td><strong>@serialData description</strong></td></tr><tr><td><strong>@serialField</strong></td><td><strong>说明一个ObjectStreamField组件</strong></td><td><strong>@serialField name type description</strong></td></tr><tr><td><strong>@since</strong></td><td><strong>标记当引入一个特定的变化时</strong></td><td><strong>@since release</strong></td></tr><tr><td><strong>@throws</strong></td><td><strong>和 @exception标签一样.</strong></td><td><strong>The @throws tag has the same meaning as the @exception tag.</strong></td></tr><tr><td><strong>{@value}</strong></td><td><strong>显示常量的值，该常量必须是static属性。</strong></td><td><strong>Displays the value of a constant, which must be a static field.</strong></td></tr><tr><td><strong>@version</strong></td><td><strong>指定类的版本</strong></td><td><strong>@version info</strong></td></tr></tbody></table><h2 id="java-代码规范" tabindex="-1">Java 代码规范 <a class="header-anchor" href="#java-代码规范" aria-label="Permalink to &quot;Java 代码规范&quot;">​</a></h2><ol><li><p>类、方法的注释,要以javadoc的方式来写。</p></li><li><p>非Java Doc的注释，往往是给代码的维护者看的，着重告述读者为什么这样写,如何修改,注意什么问题等</p></li><li><p>使用tab操作，实现缩进，默认<strong>整体向右边移动</strong>，时候用<strong>shift+tab整体向左移</strong></p></li><li><p>运算符和=两边习惯性各加一个空格。</p></li><li><p>源文件使用utf-8编码</p></li><li><p>行宽度不要超过80字符</p></li><li><p>代码编写次行风格和行尾风格(!) 推荐<strong>行尾风格</strong></p></li></ol><h2 id="dos-命令" tabindex="-1">DOS 命令 <a class="header-anchor" href="#dos-命令" aria-label="Permalink to &quot;DOS 命令&quot;">​</a></h2><h3 id="dos-介绍" tabindex="-1">DOS 介绍 <a class="header-anchor" href="#dos-介绍" aria-label="Permalink to &quot;DOS 介绍&quot;">​</a></h3><p>Dos：Disk Operating System 磁盘操作系统, 简单说一下windows 的目录结构。</p><p><strong>原理图：</strong></p><p><img src="https://hengmaozhang.github.io/picx-images-hosting/picx-image.70agxghxb3.jpg" alt="原理图"></p><h3 id="常用dos-命令" tabindex="-1">常用dos 命令 <a class="header-anchor" href="#常用dos-命令" aria-label="Permalink to &quot;常用dos 命令&quot;">​</a></h3><table tabindex="0"><thead><tr><th>命令</th><th>功能</th><th>案例</th></tr></thead><tbody><tr><td>dir</td><td>查看当前目录是有什么内容</td><td><code>dir d:\\abc2</code></td></tr><tr><td>cd : change directory</td><td>切换到其他盘下</td><td><code>cd \\D c: 切换到C盘 </code></td></tr><tr><td>cd \\</td><td>切换到根目录</td><td></td></tr><tr><td>..\\</td><td>上一级目录</td><td><code>cd .. 切换到上一级</code></td></tr><tr><td>..\\..\\</td><td>上2级目录</td><td></td></tr><tr><td>tree</td><td>查看指定的目录下所有的子级目录</td><td></td></tr><tr><td>cls</td><td>清屏</td><td></td></tr><tr><td>exit</td><td>退出DOS</td><td></td></tr></tbody></table><h3 id="其他dos命令" tabindex="-1"><strong>其他DOS命令</strong> <a class="header-anchor" href="#其他dos命令" aria-label="Permalink to &quot;**其他DOS命令**&quot;">​</a></h3><p>md[创建目录] rd[删除目录] copy[拷贝文件] del[删除文件] echo[输入内容到文件] type move[剪切]</p><p><code>echo ok &gt; pic.txt</code></p><h2 id="环境变量path配置及其作用" tabindex="-1">环境变量path配置及其作用 <a class="header-anchor" href="#环境变量path配置及其作用" aria-label="Permalink to &quot;环境变量path配置及其作用&quot;">​</a></h2><ol><li>环境变量的作用是为了在dos的任意目录，可以去使用java 和 javac命令</li><li>先配置 JAVA_HOME = 指向jdk安装的主目录</li><li>编辑path环境变量，增加 %JAVA_HOME%\\bin</li></ol>`,67)]))}const E=s(l,[["render",h]]);export{g as __pageData,E as default};
