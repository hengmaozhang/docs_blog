import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.1L-BeKqY.js";const g=JSON.parse('{"title":"第3章 变量","description":"","frontmatter":{},"headers":[],"relativePath":"learn_java/ch03_variable.md","filePath":"learn_java/ch03_variable.md"}'),h={name:"learn_java/ch03_variable.md"};function t(p,s,k,e,r,E){return n(),a("div",null,s[0]||(s[0]=[l(`<p>[TOC]</p><p><a href="#第3章-变量">第3章 变量</a></p><ul><li><a href="#程序中号的使用">程序中+号的使用</a></li><li><a href="#数据类型">数据类型</a></li><li><a href="#整数类型">整数类型</a><ul><li><a href="#整型的类型">整型的类型</a></li><li><a href="#整型的使用细节intdetailjava">整型的使用细节IntDetail.java</a></li></ul></li><li><a href="#浮点类型">浮点类型</a><ul><li><a href="#浮点型的分类">浮点型的分类</a></li><li><a href="#浮点型使用细节floatdetailjava">浮点型使用细节FloatDetail.java</a></li></ul></li><li><a href="#java-api-文档">Java API 文档</a></li><li><a href="#字符类型char">字符类型(char)</a><ul><li><a href="#字符类型使用细节">字符类型使用细节</a></li><li><a href="#字符本质探讨">字符本质探讨</a></li></ul></li><li><a href="#布尔类型boolean">布尔类型：boolean</a></li><li><a href="#基本数据类型转换">基本数据类型转换</a><ul><li><a href="#自动类型转换">自动类型转换</a></li><li><a href="#自动类型转换注意和细节">自动类型转换注意和细节</a></li><li><a href="#强制类型转换">强制类型转换</a></li></ul></li><li><a href="#基本数据类型和string-类型的转换">基本数据类型和String 类型的转换</a><ul><li><a href="#介绍和使用">介绍和使用</a></li><li><a href="#注意事项">注意事项</a></li></ul></li></ul><h1 id="第3章-变量" tabindex="-1">第3章 变量 <a class="header-anchor" href="#第3章-变量" aria-label="Permalink to &quot;第3章 变量&quot;">​</a></h1><h2 id="变量使用注意事项" tabindex="-1">变量使用注意事项 <a class="header-anchor" href="#变量使用注意事项" aria-label="Permalink to &quot;变量使用注意事项&quot;">​</a></h2><ol><li><p>变量表示内存中的一个存储区域[不同的变量，类型不同，占用的空间大小不同，比如：int 4个字节，double就是8个字节，先有基本印象，后面说字节]</p></li><li><p>该区域有自己的名称[变量名]和类型[数据类型]</p></li><li><p>变量必须先声明，后使用，即有顺序</p></li><li><p>该区域的数据/值可以在<strong>同一类型</strong>范围内不断变化</p></li><li><p>变量在同一个作用域内<strong>不能重名</strong></p></li><li><p>变量=变量名+值+数据类型</p></li></ol><h2 id="程序中-号的使用" tabindex="-1">程序中+号的使用 <a class="header-anchor" href="#程序中-号的使用" aria-label="Permalink to &quot;程序中+号的使用&quot;">​</a></h2><p>1.当左右两边都是数值型时，则做加法运算</p><p>2.当左右两边有一方为字符串，则做拼接运算</p><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><p><img src="https://hengmaozhang.github.io/picx-images-hosting/20250222/picx-image.6pnn4djbdx.jpg" alt=""></p><h2 id="整数类型" tabindex="-1">整数类型 <a class="header-anchor" href="#整数类型" aria-label="Permalink to &quot;整数类型&quot;">​</a></h2><h3 id="整型的类型" tabindex="-1">整型的类型 <a class="header-anchor" href="#整型的类型" aria-label="Permalink to &quot;整型的类型&quot;">​</a></h3><table tabindex="0"><thead><tr><th>类型</th><th>占用存储空间</th><th>范围</th></tr></thead><tbody><tr><td>byte [字节]</td><td>1字节</td><td>-128 ~ 127</td></tr><tr><td>short [短整型]</td><td>2字节</td><td>-(2^15) ~ 2^15-1(-32768 ~ 32767)</td></tr><tr><td>int [整型]</td><td>4字节</td><td>-2^31 ~ 2^31-1(-2147483648 ~ 2147483647)</td></tr><tr><td>long [长整型]</td><td>8字节</td><td>-2^63 ~ 2^63-1</td></tr></tbody></table><h3 id="整型的使用细节intdetail-java" tabindex="-1">整型的使用细节IntDetail.java <a class="header-anchor" href="#整型的使用细节intdetail-java" aria-label="Permalink to &quot;整型的使用细节IntDetail.java&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IntDetail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 编写一个main方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// Java的整型常量（具体值）默认为 int 型，声明long型常量须后加‘l’或‘L’</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//4个字节</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// int n2 = 1L; 不对</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//对</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>Java各整数类型有固定的范围和字段长度，不受具体OS[操作系统]的影响，以保证java程序的可移植性。</li><li>Java的整型常量(具体值)默认为int型，声明long型常量须后加<code>l</code>或<code>L</code></li></ul><h2 id="浮点类型" tabindex="-1">浮点类型 <a class="header-anchor" href="#浮点类型" aria-label="Permalink to &quot;浮点类型&quot;">​</a></h2><h3 id="浮点型的分类" tabindex="-1">浮点型的分类 <a class="header-anchor" href="#浮点型的分类" aria-label="Permalink to &quot;浮点型的分类&quot;">​</a></h3><table tabindex="0"><thead><tr><th>类型</th><th>占用存储空间</th><th>范围</th></tr></thead><tbody><tr><td>单精度float</td><td>4字节</td><td>-3.403E38 ~ 3.403E38</td></tr><tr><td>双精度double</td><td>8字节</td><td>-1.798E308 ~ 1.798E308</td></tr></tbody></table><ul><li>关于浮点数在机器中存放形式的简单说明, 浮点数=符号位+指数位+尾数位</li><li>尾数部分可能丢失，造成精度损失(小数都是近似值)。</li></ul><h3 id="浮点型使用细节floatdetail-java" tabindex="-1">浮点型使用细节FloatDetail.java <a class="header-anchor" href="#浮点型使用细节floatdetail-java" aria-label="Permalink to &quot;浮点型使用细节FloatDetail.java&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FloatDetail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //编写一个main方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //Java 的浮点型常量(具体值)默认为double型，声明float型常量，须后加‘f’或‘F&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //float num1 = 1.1;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //对不对?错误</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.1F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//对的</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//对</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.1f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//对</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //十进制数形式：如：5.12       512.0f        .512   (必须有小数点）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num5 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> .123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//等价 0.123</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num5);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //科学计数法形式:如：5.12e2  5.12E-2 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.12e2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//512.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.12E-2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//0.0512</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //通常情况下，应该使用double型，因为它比float型更精确。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //[举例说明]double num9 = 2.1234567851;float num10 =  2.1234567851F;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num9 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2.1234567851</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num10 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2.1234567851F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num9);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num10);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //浮点数使用陷阱: 2.7 和 8.1 / 3  比较</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num11 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num12 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num11);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//2.7</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num12);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//接近2.7的一个小数，而不是2.7</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //得到一个重要的使用点: 当我们对运算结果是小数的进行相等判断时，要小心</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //应该是以两个数的差值的绝对值，在某个精度范围类判断</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( num11 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num12) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;num11 == num12 相等&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //正确的写法 , ctrl + / 注释快捷键, 再次输入就取消注释</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num11 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num12) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.000001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;差值非常小，到我的规定精度，认为相等...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 可以通过java API  来看 下一个视频介绍如何使用API</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num11 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num12));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //细节:如果是直接查询得的的小数或者直接赋值，是可以判断相等</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol><li><p>与整数类型类似，Java浮点类型也有固定的范围和字段长度，不受具体OS的影响。</p></li><li><p>Java的浮点型常量(具体值)默认为double型，声明float型常量，须后加‘f或‘F&#39;</p></li><li><p>浮点型常量有两种表示形式</p><ul><li><p>十进制数形式:如:5.12    512.0f    .512(必须有小数点，0可以省略)</p></li><li><p>科学计数法形式: 如:5.12<strong>e</strong>2[5.12*****10的2次方]</p><p>5.12E-2[5.12**/**10的2次方]</p></li></ul></li><li><p>通常情况下，应该使用double型，因为它比float型更精确。 double num9 = 2.1234567851; float num10= 2.1234567851F;</p></li><li><p>浮点数使用陷阱:2.7和8.1/3比较 当我们对运算结果是小数的进行相等判断时，要小心应该是<strong>以两个数的差值的绝对值，在某个精度范围类判断</strong>。</p></li></ol><h2 id="java-api-文档" tabindex="-1">Java API 文档 <a class="header-anchor" href="#java-api-文档" aria-label="Permalink to &quot;Java API 文档&quot;">​</a></h2><p>API (Application Programming Interface,应用程序编程接口)是Java提供的基本编程接口(java提供的类还有相关的方法)。中文在线文档: <a href="https://www.matools.com" target="_blank" rel="noreferrer">https://www.matools.com</a></p><p>Java语言提供了大量的基础类，因此 Oracle公司也为这些基础类提供了相应的API文档,用于告诉开发者如何使用这些类,以及这些类里包含的方法。</p><p>Java类的组织形式</p><p><img src="https://hengmaozhang.github.io/picx-images-hosting/20250222/picx-image.5mnxtjtxom.jpg" alt="picx-image"></p><p>查询 ArrayList 类有哪些方法：</p><ul><li><p>包-&gt;类-&gt;方法</p></li><li><p>直接索引 Math</p></li></ul><h2 id="字符类型-char" tabindex="-1">字符类型(char) <a class="header-anchor" href="#字符类型-char" aria-label="Permalink to &quot;字符类型(char)&quot;">​</a></h2><p>字符类型可以表示单个字符,字符类型是char，char 是两个字节(可以存放汉字)，多个字符用字符串String</p><h3 id="字符类型使用细节" tabindex="-1">字符类型使用细节 <a class="header-anchor" href="#字符类型使用细节" aria-label="Permalink to &quot;字符类型使用细节&quot;">​</a></h3><p>字符常量是用单引号(&#39;&#39;)括起来的单个字符</p><p>Java中还允许使用转义字符来将其后的字符转变为特殊字符型常量。</p><blockquote><p>例如:char c3 = &#39;\\n&#39;; 表示换行符</p></blockquote><p>在java中,char的本质是一个整数，在输出时，是 unicode码对应的字符</p><p><a href="http://tool.chinaz.com/Tools/Unicode.aspx" target="_blank" rel="noreferrer">http://tool.chinaz.com/Tools/Unicode.aspx</a></p><p>char类型是可以进行运算的，相当于一个整数，因为它都对应有Unicode码.</p><h3 id="字符本质探讨" tabindex="-1">字符本质探讨 <a class="header-anchor" href="#字符本质探讨" aria-label="Permalink to &quot;字符本质探讨&quot;">​</a></h3><p>字符型存储到计算机中，需要将字符对应的码值(整数)找出来，比如&#39;a&#39;</p><ul><li><p>存储:\`a&#39;==&gt;码值97 ==&gt;二进制(110 0001) ==&gt;存储</p></li><li><p>读取:二进制(110 0001)=&gt;97 ===&gt; &#39;a&#39;=&gt;显示</p></li></ul><p>字符和码值的对应关系是通过字符编码表决定的(是规定好)</p><p>介绍一下字符编码表</p><ul><li><p>ASClI (ASCIl编码表一个字节表示，一个128个字符,实际上一个字节可以表示256个字符,只用128个)</p></li><li><p>Unicode ( Unicode 编码表固定大小的编码使用两个字节来表示字符，字母和汉字统一都是占用两个字节这样浪费空间 )</p><ul><li><p>Unicode的好处: 一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，使用 Unicode 没有乱码的问题。</p></li><li><p>Unicode 的缺点: 一个英文字母和一个汉字都占用2个字节，这对于存储空间来说是浪费。</p></li><li><p>2的16次方是65536,所以最多编码是65536个字符</p></li><li><p>编码0-127的字符是与ASCII的编码一样.比如&#39;a&#39;在ASCII码是0x61，在unicode码是 0x0061,都对应97.因此 Unicode码兼容ASCII码.</p></li></ul></li><li><p>utf-8(编码表,大小可变的编码字母使用1个字节，汉字使用3个字节)gbk(可以表示汉字，而且范围广，字母使用1个字节,汉字2个字节)gb2312(可以表示汉字,gb2312 &lt;gbk)</p><ul><li><p>UTF-8是在互联网上使用最广的一种Unicode的实现方式(改进)</p></li><li><p>UTF-8是一种变长的编码方式。它可以使用1-6个字节表示一个符号，根据不同的符号而变化字节长度。</p></li><li><p>使用大小可变的编码字母占1个字节，汉字占3个字节</p></li></ul></li><li><p>big5码(繁体中文,台湾,香港)</p></li></ul><h2 id="布尔类型-boolean" tabindex="-1">布尔类型：boolean <a class="header-anchor" href="#布尔类型-boolean" aria-label="Permalink to &quot;布尔类型：boolean&quot;">​</a></h2><p>布尔类型也叫boolean类型，booolean类型数据只允许取值true和false，无null</p><p>boolean类型占1个字节。</p><h2 id="基本数据类型转换" tabindex="-1">基本数据类型转换 <a class="header-anchor" href="#基本数据类型转换" aria-label="Permalink to &quot;基本数据类型转换&quot;">​</a></h2><h3 id="自动类型转换" tabindex="-1">自动类型转换 <a class="header-anchor" href="#自动类型转换" aria-label="Permalink to &quot;自动类型转换&quot;">​</a></h3><p>当java程序在进行赋值或者运算时，精度小的类型自动转换为精度大的数据类型,这个就是自动类型转换。</p><p><img src="https://raw.githubusercontent.com/timerring/scratchpad2023/main/2023/04/11-16-56-17-1681203376.png" alt=""></p><h3 id="自动类型转换注意和细节" tabindex="-1">自动类型转换注意和细节 <a class="header-anchor" href="#自动类型转换注意和细节" aria-label="Permalink to &quot;自动类型转换注意和细节&quot;">​</a></h3><ol><li><p>有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型,然后再进行计算。</p></li><li><p>当我们把精度(容量)大的数据类型赋值给精度(容量)小的数据类型时，就会报错，反之就会进行自动类型转换。</p></li><li><p>(byte, short)和char之间不会相互自动转换。<strong>byte，short，char他们三者可以计算，在计算时首先转换为int类型。</strong></p></li><li><p>boolean不参与转换</p></li><li><p>自动提升原则:表达式结果的类型自动提升为操作数中最大的类型</p></li></ol><h3 id="强制类型转换" tabindex="-1">强制类型转换 <a class="header-anchor" href="#强制类型转换" aria-label="Permalink to &quot;强制类型转换&quot;">​</a></h3><p>自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符( )，但可能造成精度降低或溢出,格外要注意。</p><p>char类型可以保存int的常量值，但不能保存int的变量值，需要强转</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ForceConvertDetail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //编写一个main方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //演示强制类型转换</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //强转符号只针对于最近的操作数有效，往往会使用小括号提升优先级</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //int x = (int)10*3.5+6*1.5;//编译错误： double -&gt; int </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (int)44.0 -&gt; 44</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//44</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//ok</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//ok</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //char c2 = m;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //错误</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)m; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//ok</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c3);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//100对应的字符, d字符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="基本数据类型和string-类型的转换" tabindex="-1">基本数据类型和String 类型的转换 <a class="header-anchor" href="#基本数据类型和string-类型的转换" aria-label="Permalink to &quot;基本数据类型和String 类型的转换&quot;">​</a></h2><h3 id="介绍和使用" tabindex="-1">介绍和使用 <a class="header-anchor" href="#介绍和使用" aria-label="Permalink to &quot;介绍和使用&quot;">​</a></h3><p>在程序开发中，我们经常需要将基本数据类型转成String类型。或者将String类型转成基本数据类型。</p><ul><li><p>基本类型转String类型</p><p>语法:将基本类型的值+&quot;&quot;即可</p></li><li><p>String类型转基本数据类型</p><p>语法:通过基本类型的包装类调用parseXX方法即可</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringToBasic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//编写一个main方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		//String-&gt;对应的基本数据类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		String s5 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		//会在 OOP 讲对象和方法的时候回详细</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		//解读 使用 基本数据类型对应的包装类的相应方法，得到基本数据类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Integer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s5);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Double.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s5);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Float.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s5);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Long.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseLong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s5);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num5 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Byte.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s5);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Boolean.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num6 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Short.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s5);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;===================&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num1);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//123</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num2);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//123.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num3);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//123.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num4);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//123</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num5);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//123</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num6);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//123</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		//怎么把字符串转成字符char -&gt; 含义是指 把字符串的第一个字符得到</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		//解读  s5.charAt(0) 得到 s5字符串的第一个字符 &#39;1&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s5.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><p>在将String 类型转成基本数据类型时，要确保String类型能够转成有效的数据 ，比如我们可以把&quot;123&quot; , 转成一个整数，但是不能把&quot;hello&quot; 转成一个整数。如果格式不正确，就会抛出异常，程序就会终止。</p>`,66)]))}const y=i(h,[["render",t]]);export{g as __pageData,y as default};
